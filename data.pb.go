// Code generated by protoc-gen-go.
// source: data.proto
// DO NOT EDIT!

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of CameraTarget from enums.proto

// Ignoring public import of PokemonRarity from enums.proto

// Ignoring public import of ItemCategory from enums.proto

// Ignoring public import of Gender from enums.proto

// Ignoring public import of PokemonId from enums.proto

// Ignoring public import of BadgeType from enums.proto

// Ignoring public import of TutorialState from enums.proto

// Ignoring public import of CameraInterpolation from enums.proto

// Ignoring public import of PokemonMovementType from enums.proto

// Ignoring public import of PokemonMove from enums.proto

// Ignoring public import of Platform from enums.proto

// Ignoring public import of TeamColor from enums.proto

// Ignoring public import of HoloIapItemCategory from enums.proto

// Ignoring public import of ActivityType from enums.proto

// Ignoring public import of PokemonFamilyId from enums.proto

// Ignoring public import of ItemEffect from enums.proto

// Ignoring public import of PokemonType from enums.proto

// Ignoring public import of ContactSettings from data_player.proto

// Ignoring public import of DailyBonus from data_player.proto

// Ignoring public import of PlayerCurrency from data_player.proto

// Ignoring public import of Currency from data_player.proto

// Ignoring public import of PlayerAvatar from data_player.proto

// Ignoring public import of PlayerCamera from data_player.proto

// Ignoring public import of EquippedBadge from data_player.proto

// Ignoring public import of PlayerStats from data_player.proto

// Ignoring public import of PlayerPublicProfile from data_player.proto

// Ignoring public import of ItemData from inventory_item.proto

// Ignoring public import of ItemAward from inventory_item.proto

// Ignoring public import of ItemType from inventory_item.proto

// Ignoring public import of ItemId from inventory_item.proto

type PokedexEntry struct {
	PokemonId            PokemonId `protobuf:"varint,1,opt,name=pokemon_id,json=pokemonId,enum=POGOProtos.Enums.PokemonId" json:"pokemon_id,omitempty"`
	TimesEncountered     int32     `protobuf:"varint,2,opt,name=times_encountered,json=timesEncountered" json:"times_encountered,omitempty"`
	TimesCaptured        int32     `protobuf:"varint,3,opt,name=times_captured,json=timesCaptured" json:"times_captured,omitempty"`
	EvolutionStonePieces int32     `protobuf:"varint,4,opt,name=evolution_stone_pieces,json=evolutionStonePieces" json:"evolution_stone_pieces,omitempty"`
	EvolutionStones      int32     `protobuf:"varint,5,opt,name=evolution_stones,json=evolutionStones" json:"evolution_stones,omitempty"`
}

func (m *PokedexEntry) Reset()                    { *m = PokedexEntry{} }
func (m *PokedexEntry) String() string            { return proto.CompactTextString(m) }
func (*PokedexEntry) ProtoMessage()               {}
func (*PokedexEntry) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

type PlayerData struct {
	CreationTimestampMs int64            `protobuf:"varint,1,opt,name=creation_timestamp_ms,json=creationTimestampMs" json:"creation_timestamp_ms,omitempty"`
	Username            string           `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Team                TeamColor        `protobuf:"varint,5,opt,name=team,enum=POGOProtos.Enums.TeamColor" json:"team,omitempty"`
	TutorialState       []TutorialState  `protobuf:"varint,7,rep,packed,name=tutorial_state,json=tutorialState,enum=POGOProtos.Enums.TutorialState" json:"tutorial_state,omitempty"`
	Avatar              *PlayerAvatar    `protobuf:"bytes,8,opt,name=avatar" json:"avatar,omitempty"`
	MaxPokemonStorage   int32            `protobuf:"varint,9,opt,name=max_pokemon_storage,json=maxPokemonStorage" json:"max_pokemon_storage,omitempty"`
	MaxItemStorage      int32            `protobuf:"varint,10,opt,name=max_item_storage,json=maxItemStorage" json:"max_item_storage,omitempty"`
	DailyBonus          *DailyBonus      `protobuf:"bytes,11,opt,name=daily_bonus,json=dailyBonus" json:"daily_bonus,omitempty"`
	EquippedBadge       *EquippedBadge   `protobuf:"bytes,12,opt,name=equipped_badge,json=equippedBadge" json:"equipped_badge,omitempty"`
	ContactSettings     *ContactSettings `protobuf:"bytes,13,opt,name=contact_settings,json=contactSettings" json:"contact_settings,omitempty"`
	Currencies          []*Currency      `protobuf:"bytes,14,rep,name=currencies" json:"currencies,omitempty"`
}

func (m *PlayerData) Reset()                    { *m = PlayerData{} }
func (m *PlayerData) String() string            { return proto.CompactTextString(m) }
func (*PlayerData) ProtoMessage()               {}
func (*PlayerData) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *PlayerData) GetAvatar() *PlayerAvatar {
	if m != nil {
		return m.Avatar
	}
	return nil
}

func (m *PlayerData) GetDailyBonus() *DailyBonus {
	if m != nil {
		return m.DailyBonus
	}
	return nil
}

func (m *PlayerData) GetEquippedBadge() *EquippedBadge {
	if m != nil {
		return m.EquippedBadge
	}
	return nil
}

func (m *PlayerData) GetContactSettings() *ContactSettings {
	if m != nil {
		return m.ContactSettings
	}
	return nil
}

func (m *PlayerData) GetCurrencies() []*Currency {
	if m != nil {
		return m.Currencies
	}
	return nil
}

type AssetDigestEntry struct {
	AssetId    string `protobuf:"bytes,1,opt,name=asset_id,json=assetId" json:"asset_id,omitempty"`
	BundleName string `protobuf:"bytes,2,opt,name=bundle_name,json=bundleName" json:"bundle_name,omitempty"`
	Version    int64  `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	Checksum   uint32 `protobuf:"fixed32,4,opt,name=checksum" json:"checksum,omitempty"`
	Size       int32  `protobuf:"varint,5,opt,name=size" json:"size,omitempty"`
	Key        []byte `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *AssetDigestEntry) Reset()                    { *m = AssetDigestEntry{} }
func (m *AssetDigestEntry) String() string            { return proto.CompactTextString(m) }
func (*AssetDigestEntry) ProtoMessage()               {}
func (*AssetDigestEntry) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

type PlayerBadge struct {
	BadgeType    BadgeType `protobuf:"varint,1,opt,name=badge_type,json=badgeType,enum=POGOProtos.Enums.BadgeType" json:"badge_type,omitempty"`
	Rank         int32     `protobuf:"varint,2,opt,name=rank" json:"rank,omitempty"`
	StartValue   int32     `protobuf:"varint,3,opt,name=start_value,json=startValue" json:"start_value,omitempty"`
	EndValue     int32     `protobuf:"varint,4,opt,name=end_value,json=endValue" json:"end_value,omitempty"`
	CurrentValue float64   `protobuf:"fixed64,5,opt,name=current_value,json=currentValue" json:"current_value,omitempty"`
}

func (m *PlayerBadge) Reset()                    { *m = PlayerBadge{} }
func (m *PlayerBadge) String() string            { return proto.CompactTextString(m) }
func (*PlayerBadge) ProtoMessage()               {}
func (*PlayerBadge) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

type DownloadUrlEntry struct {
	AssetId  string `protobuf:"bytes,1,opt,name=asset_id,json=assetId" json:"asset_id,omitempty"`
	Url      string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	Size     int32  `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	Checksum uint32 `protobuf:"varint,4,opt,name=checksum" json:"checksum,omitempty"`
}

func (m *DownloadUrlEntry) Reset()                    { *m = DownloadUrlEntry{} }
func (m *DownloadUrlEntry) String() string            { return proto.CompactTextString(m) }
func (*DownloadUrlEntry) ProtoMessage()               {}
func (*DownloadUrlEntry) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

type PokemonData struct {
	Id                     uint64      `protobuf:"fixed64,1,opt,name=id" json:"id,omitempty"`
	PokemonId              PokemonId   `protobuf:"varint,2,opt,name=pokemon_id,json=pokemonId,enum=POGOProtos.Enums.PokemonId" json:"pokemon_id,omitempty"`
	Cp                     int32       `protobuf:"varint,3,opt,name=cp" json:"cp,omitempty"`
	Stamina                int32       `protobuf:"varint,4,opt,name=stamina" json:"stamina,omitempty"`
	StaminaMax             int32       `protobuf:"varint,5,opt,name=stamina_max,json=staminaMax" json:"stamina_max,omitempty"`
	Move_1                 PokemonMove `protobuf:"varint,6,opt,name=move_1,json=move1,enum=POGOProtos.Enums.PokemonMove" json:"move_1,omitempty"`
	Move_2                 PokemonMove `protobuf:"varint,7,opt,name=move_2,json=move2,enum=POGOProtos.Enums.PokemonMove" json:"move_2,omitempty"`
	DeployedFortId         string      `protobuf:"bytes,8,opt,name=deployed_fort_id,json=deployedFortId" json:"deployed_fort_id,omitempty"`
	OwnerName              string      `protobuf:"bytes,9,opt,name=owner_name,json=ownerName" json:"owner_name,omitempty"`
	IsEgg                  bool        `protobuf:"varint,10,opt,name=is_egg,json=isEgg" json:"is_egg,omitempty"`
	EggKmWalkedTarget      float64     `protobuf:"fixed64,11,opt,name=egg_km_walked_target,json=eggKmWalkedTarget" json:"egg_km_walked_target,omitempty"`
	EggKmWalkedStart       float64     `protobuf:"fixed64,12,opt,name=egg_km_walked_start,json=eggKmWalkedStart" json:"egg_km_walked_start,omitempty"`
	Origin                 int32       `protobuf:"varint,14,opt,name=origin" json:"origin,omitempty"`
	HeightM                float32     `protobuf:"fixed32,15,opt,name=height_m,json=heightM" json:"height_m,omitempty"`
	WeightKg               float32     `protobuf:"fixed32,16,opt,name=weight_kg,json=weightKg" json:"weight_kg,omitempty"`
	IndividualAttack       int32       `protobuf:"varint,17,opt,name=individual_attack,json=individualAttack" json:"individual_attack,omitempty"`
	IndividualDefense      int32       `protobuf:"varint,18,opt,name=individual_defense,json=individualDefense" json:"individual_defense,omitempty"`
	IndividualStamina      int32       `protobuf:"varint,19,opt,name=individual_stamina,json=individualStamina" json:"individual_stamina,omitempty"`
	CpMultiplier           float32     `protobuf:"fixed32,20,opt,name=cp_multiplier,json=cpMultiplier" json:"cp_multiplier,omitempty"`
	Pokeball               ItemId      `protobuf:"varint,21,opt,name=pokeball,enum=POGOProtos.Inventory.Item.ItemId" json:"pokeball,omitempty"`
	CapturedCellId         uint64      `protobuf:"varint,22,opt,name=captured_cell_id,json=capturedCellId" json:"captured_cell_id,omitempty"`
	BattlesAttacked        int32       `protobuf:"varint,23,opt,name=battles_attacked,json=battlesAttacked" json:"battles_attacked,omitempty"`
	BattlesDefended        int32       `protobuf:"varint,24,opt,name=battles_defended,json=battlesDefended" json:"battles_defended,omitempty"`
	EggIncubatorId         string      `protobuf:"bytes,25,opt,name=egg_incubator_id,json=eggIncubatorId" json:"egg_incubator_id,omitempty"`
	CreationTimeMs         uint64      `protobuf:"varint,26,opt,name=creation_time_ms,json=creationTimeMs" json:"creation_time_ms,omitempty"`
	NumUpgrades            int32       `protobuf:"varint,27,opt,name=num_upgrades,json=numUpgrades" json:"num_upgrades,omitempty"`
	AdditionalCpMultiplier float32     `protobuf:"fixed32,28,opt,name=additional_cp_multiplier,json=additionalCpMultiplier" json:"additional_cp_multiplier,omitempty"`
	Favorite               int32       `protobuf:"varint,29,opt,name=favorite" json:"favorite,omitempty"`
	Nickname               string      `protobuf:"bytes,30,opt,name=nickname" json:"nickname,omitempty"`
	FromFort               int32       `protobuf:"varint,31,opt,name=from_fort,json=fromFort" json:"from_fort,omitempty"`
}

func (m *PokemonData) Reset()                    { *m = PokemonData{} }
func (m *PokemonData) String() string            { return proto.CompactTextString(m) }
func (*PokemonData) ProtoMessage()               {}
func (*PokemonData) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func init() {
	proto.RegisterType((*PokedexEntry)(nil), "POGOProtos.Data.PokedexEntry")
	proto.RegisterType((*PlayerData)(nil), "POGOProtos.Data.PlayerData")
	proto.RegisterType((*AssetDigestEntry)(nil), "POGOProtos.Data.AssetDigestEntry")
	proto.RegisterType((*PlayerBadge)(nil), "POGOProtos.Data.PlayerBadge")
	proto.RegisterType((*DownloadUrlEntry)(nil), "POGOProtos.Data.DownloadUrlEntry")
	proto.RegisterType((*PokemonData)(nil), "POGOProtos.Data.PokemonData")
}

func init() { proto.RegisterFile("data.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 1279 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x56, 0xed, 0x6e, 0x23, 0x35,
	0x17, 0x7e, 0xd3, 0x8f, 0x34, 0x71, 0xda, 0x34, 0x75, 0xbb, 0x7d, 0x67, 0xbb, 0xdf, 0x81, 0x15,
	0x8b, 0xd0, 0x66, 0xb5, 0x81, 0x1f, 0x08, 0x81, 0x44, 0x9b, 0x14, 0x54, 0x96, 0xb2, 0x91, 0xd3,
	0x05, 0x89, 0x3f, 0x23, 0x67, 0xc6, 0x9d, 0x5a, 0x99, 0x2f, 0x66, 0x3c, 0xd9, 0x0d, 0xf7, 0xc1,
	0x1f, 0x2e, 0x81, 0xab, 0xe0, 0xce, 0xe0, 0xf8, 0xd8, 0x93, 0x4e, 0xa2, 0x8d, 0x80, 0x3f, 0x89,
	0xfd, 0x9c, 0xe7, 0xd8, 0x9e, 0xe7, 0x7c, 0xd8, 0x84, 0xf8, 0x5c, 0xf1, 0x5e, 0x9a, 0x25, 0x2a,
	0xa1, 0xfb, 0xa3, 0xd7, 0xdf, 0xbe, 0x1e, 0xe9, 0x61, 0xde, 0x1b, 0x02, 0x7c, 0xd2, 0x12, 0x71,
	0x11, 0xe5, 0xc6, 0x7a, 0x72, 0xa0, 0x99, 0x6e, 0x1a, 0xf2, 0xb9, 0xc8, 0x2c, 0x74, 0x24, 0xe3,
	0x99, 0x88, 0x55, 0x92, 0xcd, 0x5d, 0xa9, 0x44, 0x64, 0xd0, 0xee, 0x5f, 0x35, 0xb2, 0x3b, 0x4a,
	0xa6, 0xc2, 0x17, 0xef, 0xce, 0x63, 0x95, 0xcd, 0xe9, 0x17, 0x84, 0xa4, 0x30, 0x8f, 0x92, 0xd8,
	0x95, 0xbe, 0x53, 0x7b, 0x5c, 0x7b, 0xd6, 0xee, 0xdf, 0xeb, 0x55, 0x36, 0x3b, 0xc7, 0x6d, 0x46,
	0x86, 0x73, 0xe1, 0xb3, 0x66, 0x5a, 0x0e, 0xe9, 0x27, 0xe4, 0x40, 0xc9, 0x48, 0xe4, 0xae, 0x88,
	0xbd, 0xa4, 0x88, 0x95, 0xc8, 0x84, 0xef, 0x6c, 0xc0, 0x12, 0xdb, 0xac, 0x83, 0x86, 0xf3, 0x5b,
	0x9c, 0x3e, 0x25, 0x6d, 0x43, 0xf6, 0x78, 0xaa, 0x0a, 0xcd, 0xdc, 0x44, 0xe6, 0x1e, 0xa2, 0x03,
	0x0b, 0xd2, 0xcf, 0xc8, 0xb1, 0x98, 0x25, 0x61, 0xa1, 0x24, 0x9c, 0x28, 0x57, 0x49, 0x2c, 0xdc,
	0x54, 0x0a, 0x4f, 0xe4, 0xce, 0x16, 0xd2, 0x8f, 0x16, 0xd6, 0xb1, 0x36, 0x8e, 0xd0, 0x46, 0x3f,
	0x26, 0x9d, 0x15, 0xaf, 0xdc, 0xd9, 0x46, 0xfe, 0xfe, 0x32, 0x3f, 0xef, 0xfe, 0xbe, 0x4d, 0xc8,
	0x08, 0x85, 0xd2, 0x32, 0xd2, 0x3e, 0xb9, 0xe3, 0x65, 0x82, 0xa3, 0x23, 0x9e, 0x44, 0xf1, 0x28,
	0x75, 0xa3, 0x1c, 0xa5, 0xd8, 0x64, 0x87, 0xa5, 0xf1, 0xaa, 0xb4, 0x5d, 0xe6, 0xf4, 0x84, 0x34,
	0x8a, 0x5c, 0x64, 0x31, 0x8f, 0x04, 0x7e, 0x6e, 0x93, 0x2d, 0xe6, 0xf4, 0x05, 0xd9, 0x52, 0x82,
	0x47, 0xb8, 0xfb, 0x7b, 0x95, 0xbc, 0x02, 0xeb, 0x20, 0x09, 0x93, 0x8c, 0x21, 0x91, 0x7e, 0x07,
	0xba, 0x14, 0x10, 0x26, 0xc9, 0x43, 0x38, 0x39, 0x57, 0xc2, 0xd9, 0x79, 0xbc, 0x09, 0xae, 0x8f,
	0xde, 0xe3, 0x6a, 0x79, 0x63, 0x4d, 0x3b, 0xdb, 0xe8, 0xd4, 0x40, 0xbc, 0x2a, 0x44, 0xbf, 0x24,
	0x75, 0x3e, 0x83, 0xaf, 0xca, 0x9c, 0x06, 0x6c, 0xdf, 0xea, 0x7f, 0xd8, 0x5b, 0xc9, 0x9a, 0x9e,
	0xf9, 0x72, 0xfb, 0x77, 0x8a, 0x5c, 0x66, 0x7d, 0x68, 0x8f, 0x1c, 0x46, 0xfc, 0x9d, 0x5b, 0xa6,
	0x03, 0xc8, 0x98, 0xf1, 0x40, 0x38, 0x4d, 0xd4, 0xf1, 0x00, 0x4c, 0x36, 0x09, 0xc6, 0xc6, 0x40,
	0x9f, 0x91, 0x8e, 0xe6, 0xeb, 0xec, 0x5a, 0x90, 0x09, 0x92, 0xdb, 0x80, 0x5f, 0x00, 0x5c, 0x32,
	0x07, 0xa4, 0xe5, 0x73, 0x19, 0xce, 0xdd, 0x49, 0x12, 0x17, 0xb9, 0xd3, 0xc2, 0xc3, 0x75, 0xd7,
	0x1d, 0x6e, 0xa8, 0xa9, 0x67, 0x9a, 0xc9, 0x88, 0xbf, 0x18, 0xd3, 0xef, 0x49, 0x5b, 0xfc, 0x52,
	0xc8, 0x34, 0x15, 0xbe, 0x3b, 0xe1, 0x3e, 0x6c, 0xb6, 0x8b, 0xeb, 0x3c, 0x5d, 0xb7, 0xce, 0xb9,
	0x65, 0x9f, 0x69, 0x32, 0xdb, 0x13, 0xd5, 0x29, 0x65, 0xa4, 0xe3, 0x25, 0xb1, 0xe2, 0x9e, 0x72,
	0x73, 0xa1, 0x94, 0x8c, 0x83, 0xdc, 0xd9, 0xc3, 0xf5, 0x3e, 0x5a, 0xb7, 0xde, 0xc0, 0xf0, 0xc7,
	0x96, 0xce, 0xf6, 0xbd, 0x65, 0x80, 0x7e, 0x4d, 0x88, 0x57, 0x64, 0x19, 0x54, 0x83, 0x84, 0xfc,
	0x6b, 0x43, 0x18, 0x5b, 0xfd, 0xc7, 0x6b, 0x57, 0x33, 0xcc, 0x39, 0xab, 0xf8, 0x74, 0xff, 0xa8,
	0x91, 0xce, 0x69, 0x0e, 0x07, 0x1a, 0xca, 0x00, 0xd2, 0xcd, 0x94, 0xe8, 0x5d, 0xd2, 0xe0, 0x1a,
	0x2b, 0x0b, 0xb4, 0xc9, 0x76, 0x70, 0x0e, 0x15, 0xf8, 0x88, 0xb4, 0x26, 0x45, 0xec, 0x87, 0xc2,
	0xad, 0x24, 0x23, 0x31, 0xd0, 0x0f, 0x3a, 0x1d, 0x1d, 0xb2, 0x33, 0x13, 0x59, 0x0e, 0x09, 0x8c,
	0xe5, 0xb6, 0xc9, 0xca, 0xa9, 0x4e, 0x62, 0xef, 0x46, 0x78, 0xd3, 0xbc, 0x88, 0xb0, 0xb4, 0x76,
	0xd8, 0x62, 0x4e, 0x29, 0xd9, 0xca, 0xe5, 0xaf, 0xc2, 0x96, 0x10, 0x8e, 0x69, 0x87, 0x6c, 0x4e,
	0xc5, 0xdc, 0xa9, 0x03, 0xb4, 0xcb, 0xf4, 0xb0, 0xfb, 0x67, 0x8d, 0xb4, 0xcc, 0xc7, 0x18, 0x49,
	0xa1, 0x95, 0x60, 0x5c, 0x5c, 0x35, 0x4f, 0xc5, 0xfa, 0x56, 0x82, 0xe4, 0x2b, 0xa0, 0xb0, 0xe6,
	0xa4, 0x1c, 0xea, 0x1d, 0x33, 0x1e, 0x4f, 0x6d, 0xf7, 0xc0, 0xb1, 0xfe, 0x38, 0x28, 0x88, 0x4c,
	0xb9, 0x33, 0x1e, 0x16, 0xc2, 0xb6, 0x0b, 0x82, 0xd0, 0x8f, 0x1a, 0xa1, 0xf7, 0x48, 0x53, 0xc4,
	0xbe, 0x35, 0x9b, 0xf6, 0xd0, 0x00, 0xc0, 0x18, 0x3f, 0x20, 0x7b, 0x46, 0xd8, 0xd2, 0x5f, 0x7f,
	0x4c, 0x8d, 0xed, 0x5a, 0x10, 0x49, 0xdd, 0x84, 0x74, 0x86, 0xc9, 0xdb, 0x38, 0x4c, 0xb8, 0xff,
	0x26, 0x0b, 0xff, 0x51, 0x6e, 0xd0, 0xa0, 0xc8, 0x42, 0x2b, 0xb3, 0x1e, 0x2e, 0x94, 0xda, 0xac,
	0x28, 0xb5, 0xaa, 0xec, 0xde, 0xad, 0xb2, 0xdd, 0xdf, 0x9a, 0xa0, 0x99, 0x29, 0x23, 0x6c, 0x3f,
	0x6d, 0xb2, 0x61, 0xb7, 0xa9, 0x33, 0x18, 0xad, 0xb4, 0xe3, 0x8d, 0xff, 0xd4, 0x8e, 0x61, 0x2d,
	0x2f, 0xb5, 0x27, 0x81, 0x91, 0x8e, 0xbd, 0xee, 0x58, 0x32, 0xe6, 0x56, 0x9c, 0x72, 0x6a, 0x95,
	0xd5, 0x43, 0x17, 0x2a, 0xd5, 0x86, 0x99, 0x58, 0xe8, 0x92, 0xbf, 0x83, 0x2e, 0x5c, 0x8f, 0x92,
	0x99, 0x70, 0x5f, 0x62, 0xbc, 0xdb, 0xfd, 0x07, 0x6b, 0x8f, 0x70, 0x09, 0x34, 0xb6, 0xad, 0xc9,
	0x2f, 0x17, 0x5e, 0x7d, 0x68, 0x61, 0xff, 0xd6, 0xab, 0xaf, 0xdb, 0x88, 0x2f, 0xd2, 0x30, 0x99,
	0x43, 0x5d, 0x5f, 0x27, 0x19, 0xea, 0xde, 0x40, 0x85, 0xdb, 0x25, 0xfe, 0x0d, 0xc0, 0xf0, 0x81,
	0x0f, 0x08, 0x81, 0x60, 0x89, 0xcc, 0x24, 0x7b, 0x13, 0x39, 0x4d, 0x44, 0x30, 0xd7, 0xef, 0x90,
	0xba, 0x84, 0xbb, 0x28, 0x08, 0xb0, 0x0b, 0x35, 0xd8, 0xb6, 0xcc, 0xcf, 0x83, 0x00, 0x3a, 0xf2,
	0x11, 0x60, 0xee, 0x34, 0x72, 0xdf, 0xf2, 0x10, 0x6e, 0x3e, 0x17, 0x12, 0x28, 0x10, 0x0a, 0xbb,
	0x50, 0x8d, 0x1d, 0x80, 0xed, 0x55, 0xf4, 0x13, 0x5a, 0xae, 0xd0, 0x40, 0x9f, 0x93, 0xc3, 0x65,
	0x07, 0x4c, 0x39, 0xec, 0x36, 0x35, 0xd6, 0xa9, 0xf0, 0xc7, 0x1a, 0xa7, 0xc7, 0xa4, 0x0e, 0x2d,
	0x38, 0x90, 0x31, 0x54, 0xbc, 0xd6, 0xd1, 0xce, 0x74, 0x1e, 0xdd, 0x08, 0x19, 0xdc, 0x28, 0x37,
	0x72, 0xf6, 0xc1, 0xb2, 0xc1, 0x76, 0xcc, 0xfc, 0x52, 0x27, 0xee, 0x5b, 0x63, 0x9a, 0x06, 0x4e,
	0x07, 0x6d, 0x0d, 0x03, 0xbc, 0x0a, 0xf4, 0xad, 0x2a, 0x63, 0x5f, 0xce, 0xa4, 0x5f, 0xc0, 0x95,
	0xc0, 0x15, 0xb4, 0x98, 0xa9, 0x73, 0x60, 0x6e, 0xd5, 0x5b, 0xc3, 0x29, 0xe2, 0x70, 0x56, 0x5a,
	0x21, 0xfb, 0xe2, 0x5a, 0xc4, 0xb9, 0x70, 0xa8, 0x69, 0xd9, 0xb7, 0x96, 0xa1, 0x31, 0xac, 0xd0,
	0xcb, 0xec, 0x38, 0x5c, 0xa5, 0x8f, 0x6d, 0x9e, 0xe8, 0x1a, 0x82, 0xcb, 0xb0, 0x08, 0x95, 0x4c,
	0x43, 0x29, 0x32, 0xe7, 0x08, 0xcf, 0xba, 0xeb, 0xa5, 0x97, 0x0b, 0x8c, 0x7e, 0x45, 0x1a, 0x3a,
	0x07, 0x27, 0x3c, 0x0c, 0x9d, 0x3b, 0x18, 0xf7, 0x27, 0xd5, 0xb8, 0x5f, 0x94, 0xcf, 0x90, 0x9e,
	0xbe, 0x11, 0xf0, 0x07, 0xd2, 0x76, 0xe1, 0xa2, 0xc3, 0x5f, 0xbe, 0x08, 0x5c, 0x4f, 0x84, 0xa1,
	0x0e, 0xff, 0x31, 0x2c, 0xb3, 0xc5, 0xda, 0x25, 0x3e, 0x00, 0x18, 0xc2, 0x0f, 0x97, 0xfc, 0x04,
	0xe4, 0x08, 0xe1, 0x0d, 0x61, 0x54, 0x81, 0x37, 0xc4, 0xff, 0xcd, 0x25, 0x6f, 0xf1, 0x53, 0x0b,
	0x57, 0xa9, 0xa8, 0x89, 0x0f, 0x54, 0x67, 0x89, 0x3a, 0xb4, 0xb0, 0xde, 0x5f, 0x47, 0x5b, 0xc6,
	0x5e, 0x01, 0xa6, 0x24, 0xd3, 0xfb, 0xdf, 0x35, 0xe9, 0x07, 0xf8, 0x45, 0x09, 0x5f, 0x20, 0x73,
	0xe9, 0xa9, 0xa0, 0x5f, 0x09, 0x27, 0xf6, 0xa4, 0x95, 0x57, 0x02, 0x3c, 0x10, 0x9e, 0x90, 0x5d,
	0xc8, 0x76, 0xb7, 0x48, 0x83, 0x8c, 0xfb, 0x70, 0x15, 0xdc, 0xc3, 0xad, 0x5b, 0x80, 0xbd, 0xb1,
	0x10, 0xfd, 0x9c, 0x38, 0xdc, 0xf7, 0xa5, 0x76, 0x82, 0x48, 0x2c, 0xab, 0x7c, 0x1f, 0x55, 0x3e,
	0xbe, 0xb5, 0x0f, 0xaa, 0x7a, 0x43, 0x7b, 0xb9, 0xe6, 0x33, 0x48, 0x32, 0x78, 0x2a, 0x3c, 0x30,
	0x4d, 0xaf, 0x9c, 0x6b, 0x5b, 0x2c, 0xbd, 0x29, 0xd6, 0xc7, 0x43, 0xf3, 0x32, 0x29, 0xe7, 0x3a,
	0xe9, 0xae, 0xb3, 0x24, 0xc2, 0x1a, 0x73, 0x1e, 0x59, 0x47, 0x00, 0x74, 0x71, 0x9d, 0x3d, 0xfc,
	0xf9, 0x7e, 0x20, 0xd5, 0x4d, 0x31, 0xe9, 0x79, 0x49, 0xf4, 0x22, 0x9d, 0x46, 0x71, 0x90, 0x3c,
	0x4f, 0x7c, 0xf9, 0x02, 0x9f, 0x8d, 0xf9, 0xe8, 0x7f, 0xa3, 0xda, 0x68, 0x63, 0x52, 0xc7, 0xd9,
	0xa7, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x70, 0x30, 0x35, 0x87, 0x99, 0x0a, 0x00, 0x00,
}
