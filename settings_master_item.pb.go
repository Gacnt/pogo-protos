// Code generated by protoc-gen-go.
// source: settings_master_item.proto
// DO NOT EDIT!

/*
Package protos is a generated protocol buffer package.

It is generated from these files:
	settings_master_item.proto
	networking_envelopes.proto
	networking_responses.proto
	data.proto
	settings_master_pokemon.proto
	networking_requests_messages.proto
	settings_master.proto
	data_battle.proto
	map_fort.proto
	data_capture.proto
	maps.proto
	settings.proto
	data_logs.proto
	enums.proto
	data_player.proto
	data_gym.proto
	inventory_item.proto
	networking_requests.proto
	map_pokemon.proto
	inventory.proto

It has these top-level messages:
	IncenseAttributes
	InventoryUpgradeAttributes
	ExperienceBoostAttributes
	EggIncubatorAttributes
	BattleAttributes
	FoodAttributes
	PotionAttributes
	ReviveAttributes
	PokeballAttributes
	FortModifierAttributes
	Unknown6
	AuthTicket
	ResponseEnvelope
	RequestEnvelope
	Unknown6Response
	AddFortModifierResponse
	CheckCodenameAvailableResponse
	UseItemReviveResponse
	RecycleInventoryItemResponse
	GetSuggestedCodenamesResponse
	SfidaActionLogResponse
	GetIncensePokemonResponse
	GetAssetDigestResponse
	GetHatchedEggsResponse
	ReleasePokemonResponse
	UseIncenseResponse
	CollectDailyBonusResponse
	GetDownloadUrlsResponse
	DownloadRemoteConfigVersionResponse
	EncounterTutorialCompleteResponse
	SetFavoritePokemonResponse
	NicknamePokemonResponse
	EchoResponse
	UseItemXpBoostResponse
	FortRecallPokemonResponse
	GetPlayerProfileResponse
	GetGymDetailsResponse
	CollectDailyDefenderBonusResponse
	CatchPokemonResponse
	DownloadItemTemplatesResponse
	SetContactSettingsResponse
	FortDetailsResponse
	SetPlayerTeamResponse
	UseItemGymResponse
	EncounterResponse
	ClaimCodenameResponse
	GetPlayerResponse
	DiskEncounterResponse
	PlayerUpdateResponse
	UpgradePokemonResponse
	FortSearchResponse
	StartGymBattleResponse
	GetMapObjectsResponse
	UseItemPotionResponse
	DownloadSettingsResponse
	CheckAwardedBadgesResponse
	EquipBadgeResponse
	UseItemEggIncubatorResponse
	UseItemCaptureResponse
	EvolvePokemonResponse
	GetInventoryResponse
	IncenseEncounterResponse
	FortDeployPokemonResponse
	SetAvatarResponse
	MarkTutorialCompleteResponse
	LevelUpRewardsResponse
	AttackGymResponse
	PokedexEntry
	PlayerData
	AssetDigestEntry
	PlayerBadge
	DownloadUrlEntry
	PokemonData
	StatsAttributes
	CameraAttributes
	EncounterAttributes
	FortSearchMessage
	SetFavoritePokemonMessage
	CollectDailyBonusMessage
	GetIncensePokemonMessage
	DiskEncounterMessage
	SetContactSettingsMessage
	GetGymDetailsMessage
	CollectDailyDefenderBonusMessage
	UseIncenseMessage
	FortDeployPokemonMessage
	UseItemPotionMessage
	GetInventoryMessage
	GetDownloadUrlsMessage
	GetMapObjectsMessage
	CatchPokemonMessage
	EchoMessage
	GetHatchedEggsMessage
	UseItemCaptureMessage
	IncenseEncounterMessage
	UseItemEggIncubatorMessage
	DownloadSettingsMessage
	MarkTutorialCompleteMessage
	NicknamePokemonMessage
	DownloadRemoteConfigVersionMessage
	GetSuggestedCodenamesMessage
	PlayerUpdateMessage
	AttackGymMessage
	ClaimCodenameMessage
	RecycleInventoryItemMessage
	SfidaActionLogMessage
	EquipBadgeMessage
	GetAssetDigestMessage
	FortRecallPokemonMessage
	GetPlayerProfileMessage
	DownloadItemTemplatesMessage
	ReleasePokemonMessage
	UseItemXpBoostMessage
	FortDetailsMessage
	CheckCodenameAvailableMessage
	GetPlayerMessage
	AddFortModifierMessage
	LevelUpRewardsMessage
	EncounterTutorialCompleteMessage
	UseItemGymMessage
	EvolvePokemonMessage
	SetAvatarMessage
	SetPlayerTeamMessage
	StartGymBattleMessage
	EncounterMessage
	UpgradePokemonMessage
	CheckAwardedBadgesMessage
	UseItemReviveMessage
	BadgeSettings
	MoveSettings
	PokemonSettings
	MoveSequenceSettings
	EquippedBadgeSettings
	PokemonUpgradeSettings
	ItemSettings
	CameraSettings
	IapItemDisplay
	TypeEffectiveSettings
	GymLevelSettings
	EncounterSettings
	IapSettings
	PlayerLevelSettings
	GymBattleSettings
	BattleLog
	BattlePokemonInfo
	BattleResults
	BattleAction
	BattleParticipant
	FortData
	FortSummary
	FortLureInfo
	FortModifier
	CaptureAward
	CaptureProbability
	SpawnPoint
	MapCell
	InventorySettings
	FortSettings
	LevelSettings
	GlobalSettings
	DownloadSettingsAction
	MapSettings
	ActionLogEntry
	CatchPokemonLogEntry
	FortSearchLogEntry
	ContactSettings
	DailyBonus
	PlayerCurrency
	Currency
	PlayerAvatar
	PlayerCamera
	EquippedBadge
	PlayerStats
	PlayerPublicProfile
	GymMembership
	GymState
	ItemData
	ItemAward
	Request
	MapPokemon
	NearbyPokemon
	WildPokemon
	InventoryItem
	Candy
	InventoryUpgrade
	EggIncubators
	InventoryDelta
	InventoryItemData
	AppliedItems
	EggIncubator
	AppliedItem
	InventoryUpgrades
*/
package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Ignoring public import of CameraTarget from enums.proto

// Ignoring public import of PokemonRarity from enums.proto

// Ignoring public import of ItemCategory from enums.proto

// Ignoring public import of Gender from enums.proto

// Ignoring public import of PokemonId from enums.proto

// Ignoring public import of BadgeType from enums.proto

// Ignoring public import of TutorialState from enums.proto

// Ignoring public import of CameraInterpolation from enums.proto

// Ignoring public import of PokemonMovementType from enums.proto

// Ignoring public import of PokemonMove from enums.proto

// Ignoring public import of Platform from enums.proto

// Ignoring public import of TeamColor from enums.proto

// Ignoring public import of HoloIapItemCategory from enums.proto

// Ignoring public import of ActivityType from enums.proto

// Ignoring public import of PokemonFamilyId from enums.proto

// Ignoring public import of ItemEffect from enums.proto

// Ignoring public import of PokemonType from enums.proto

// Ignoring public import of InventoryItem from inventory.proto

// Ignoring public import of Candy from inventory.proto

// Ignoring public import of InventoryUpgrade from inventory.proto

// Ignoring public import of EggIncubators from inventory.proto

// Ignoring public import of InventoryDelta from inventory.proto

// Ignoring public import of InventoryItemData from inventory.proto

// Ignoring public import of AppliedItems from inventory.proto

// Ignoring public import of EggIncubator from inventory.proto

// Ignoring public import of AppliedItem from inventory.proto

// Ignoring public import of InventoryUpgrades from inventory.proto

// Ignoring public import of EggIncubatorType from inventory.proto

// Ignoring public import of InventoryUpgradeType from inventory.proto

type IncenseAttributes struct {
	IncenseLifetimeSeconds                   int32         `protobuf:"varint,1,opt,name=incense_lifetime_seconds,json=incenseLifetimeSeconds" json:"incense_lifetime_seconds,omitempty"`
	PokemonType                              []PokemonType `protobuf:"varint,2,rep,name=pokemon_type,json=pokemonType,enum=POGOProtos.Enums.PokemonType" json:"pokemon_type,omitempty"`
	PokemonIncenseTypeProbability            float32       `protobuf:"fixed32,3,opt,name=pokemon_incense_type_probability,json=pokemonIncenseTypeProbability" json:"pokemon_incense_type_probability,omitempty"`
	StandingTimeBetweenEncountersSeconds     int32         `protobuf:"varint,4,opt,name=standing_time_between_encounters_seconds,json=standingTimeBetweenEncountersSeconds" json:"standing_time_between_encounters_seconds,omitempty"`
	MovingTimeBetweenEncounterSeconds        int32         `protobuf:"varint,5,opt,name=moving_time_between_encounter_seconds,json=movingTimeBetweenEncounterSeconds" json:"moving_time_between_encounter_seconds,omitempty"`
	DistanceRequiredForShorterIntervalMeters int32         `protobuf:"varint,6,opt,name=distance_required_for_shorter_interval_meters,json=distanceRequiredForShorterIntervalMeters" json:"distance_required_for_shorter_interval_meters,omitempty"`
	PokemonAttractedLengthSec                int32         `protobuf:"varint,7,opt,name=pokemon_attracted_length_sec,json=pokemonAttractedLengthSec" json:"pokemon_attracted_length_sec,omitempty"`
}

func (m *IncenseAttributes) Reset()                    { *m = IncenseAttributes{} }
func (m *IncenseAttributes) String() string            { return proto.CompactTextString(m) }
func (*IncenseAttributes) ProtoMessage()               {}
func (*IncenseAttributes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type InventoryUpgradeAttributes struct {
	AdditionalStorage int32                `protobuf:"varint,1,opt,name=additional_storage,json=additionalStorage" json:"additional_storage,omitempty"`
	UpgradeType       InventoryUpgradeType `protobuf:"varint,2,opt,name=upgrade_type,json=upgradeType,enum=POGOProtos.Inventory.InventoryUpgradeType" json:"upgrade_type,omitempty"`
}

func (m *InventoryUpgradeAttributes) Reset()                    { *m = InventoryUpgradeAttributes{} }
func (m *InventoryUpgradeAttributes) String() string            { return proto.CompactTextString(m) }
func (*InventoryUpgradeAttributes) ProtoMessage()               {}
func (*InventoryUpgradeAttributes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ExperienceBoostAttributes struct {
	XpMultiplier    float32 `protobuf:"fixed32,1,opt,name=xp_multiplier,json=xpMultiplier" json:"xp_multiplier,omitempty"`
	BoostDurationMs int32   `protobuf:"varint,2,opt,name=boost_duration_ms,json=boostDurationMs" json:"boost_duration_ms,omitempty"`
}

func (m *ExperienceBoostAttributes) Reset()                    { *m = ExperienceBoostAttributes{} }
func (m *ExperienceBoostAttributes) String() string            { return proto.CompactTextString(m) }
func (*ExperienceBoostAttributes) ProtoMessage()               {}
func (*ExperienceBoostAttributes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type EggIncubatorAttributes struct {
	IncubatorType      EggIncubatorType `protobuf:"varint,1,opt,name=incubator_type,json=incubatorType,enum=POGOProtos.Inventory.EggIncubatorType" json:"incubator_type,omitempty"`
	Uses               int32            `protobuf:"varint,2,opt,name=uses" json:"uses,omitempty"`
	DistanceMultiplier float32          `protobuf:"fixed32,3,opt,name=distance_multiplier,json=distanceMultiplier" json:"distance_multiplier,omitempty"`
}

func (m *EggIncubatorAttributes) Reset()                    { *m = EggIncubatorAttributes{} }
func (m *EggIncubatorAttributes) String() string            { return proto.CompactTextString(m) }
func (*EggIncubatorAttributes) ProtoMessage()               {}
func (*EggIncubatorAttributes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type BattleAttributes struct {
	StaPercent float32 `protobuf:"fixed32,1,opt,name=sta_percent,json=staPercent" json:"sta_percent,omitempty"`
}

func (m *BattleAttributes) Reset()                    { *m = BattleAttributes{} }
func (m *BattleAttributes) String() string            { return proto.CompactTextString(m) }
func (*BattleAttributes) ProtoMessage()               {}
func (*BattleAttributes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type FoodAttributes struct {
	ItemEffect        []ItemEffect `protobuf:"varint,1,rep,name=item_effect,json=itemEffect,enum=POGOProtos.Enums.ItemEffect" json:"item_effect,omitempty"`
	ItemEffectPercent []float32    `protobuf:"fixed32,2,rep,name=item_effect_percent,json=itemEffectPercent" json:"item_effect_percent,omitempty"`
	GrowthPercent     float32      `protobuf:"fixed32,3,opt,name=growth_percent,json=growthPercent" json:"growth_percent,omitempty"`
}

func (m *FoodAttributes) Reset()                    { *m = FoodAttributes{} }
func (m *FoodAttributes) String() string            { return proto.CompactTextString(m) }
func (*FoodAttributes) ProtoMessage()               {}
func (*FoodAttributes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type PotionAttributes struct {
	StaPercent float32 `protobuf:"fixed32,1,opt,name=sta_percent,json=staPercent" json:"sta_percent,omitempty"`
	StaAmount  int32   `protobuf:"varint,2,opt,name=sta_amount,json=staAmount" json:"sta_amount,omitempty"`
}

func (m *PotionAttributes) Reset()                    { *m = PotionAttributes{} }
func (m *PotionAttributes) String() string            { return proto.CompactTextString(m) }
func (*PotionAttributes) ProtoMessage()               {}
func (*PotionAttributes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type ReviveAttributes struct {
	StaPercent float32 `protobuf:"fixed32,1,opt,name=sta_percent,json=staPercent" json:"sta_percent,omitempty"`
}

func (m *ReviveAttributes) Reset()                    { *m = ReviveAttributes{} }
func (m *ReviveAttributes) String() string            { return proto.CompactTextString(m) }
func (*ReviveAttributes) ProtoMessage()               {}
func (*ReviveAttributes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type PokeballAttributes struct {
	ItemEffect         ItemEffect `protobuf:"varint,1,opt,name=item_effect,json=itemEffect,enum=POGOProtos.Enums.ItemEffect" json:"item_effect,omitempty"`
	CaptureMulti       float32    `protobuf:"fixed32,2,opt,name=capture_multi,json=captureMulti" json:"capture_multi,omitempty"`
	CaptureMultiEffect float32    `protobuf:"fixed32,3,opt,name=capture_multi_effect,json=captureMultiEffect" json:"capture_multi_effect,omitempty"`
	ItemEffectMod      float32    `protobuf:"fixed32,4,opt,name=item_effect_mod,json=itemEffectMod" json:"item_effect_mod,omitempty"`
}

func (m *PokeballAttributes) Reset()                    { *m = PokeballAttributes{} }
func (m *PokeballAttributes) String() string            { return proto.CompactTextString(m) }
func (*PokeballAttributes) ProtoMessage()               {}
func (*PokeballAttributes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type FortModifierAttributes struct {
	ModifierLifetimeSeconds   int32 `protobuf:"varint,1,opt,name=modifier_lifetime_seconds,json=modifierLifetimeSeconds" json:"modifier_lifetime_seconds,omitempty"`
	TroyDiskNumPokemonSpawned int32 `protobuf:"varint,2,opt,name=troy_disk_num_pokemon_spawned,json=troyDiskNumPokemonSpawned" json:"troy_disk_num_pokemon_spawned,omitempty"`
}

func (m *FortModifierAttributes) Reset()                    { *m = FortModifierAttributes{} }
func (m *FortModifierAttributes) String() string            { return proto.CompactTextString(m) }
func (*FortModifierAttributes) ProtoMessage()               {}
func (*FortModifierAttributes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func init() {
	proto.RegisterType((*IncenseAttributes)(nil), "POGOProtos.Settings.Master.Item.IncenseAttributes")
	proto.RegisterType((*InventoryUpgradeAttributes)(nil), "POGOProtos.Settings.Master.Item.InventoryUpgradeAttributes")
	proto.RegisterType((*ExperienceBoostAttributes)(nil), "POGOProtos.Settings.Master.Item.ExperienceBoostAttributes")
	proto.RegisterType((*EggIncubatorAttributes)(nil), "POGOProtos.Settings.Master.Item.EggIncubatorAttributes")
	proto.RegisterType((*BattleAttributes)(nil), "POGOProtos.Settings.Master.Item.BattleAttributes")
	proto.RegisterType((*FoodAttributes)(nil), "POGOProtos.Settings.Master.Item.FoodAttributes")
	proto.RegisterType((*PotionAttributes)(nil), "POGOProtos.Settings.Master.Item.PotionAttributes")
	proto.RegisterType((*ReviveAttributes)(nil), "POGOProtos.Settings.Master.Item.ReviveAttributes")
	proto.RegisterType((*PokeballAttributes)(nil), "POGOProtos.Settings.Master.Item.PokeballAttributes")
	proto.RegisterType((*FortModifierAttributes)(nil), "POGOProtos.Settings.Master.Item.FortModifierAttributes")
}

func init() { proto.RegisterFile("settings_master_item.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 856 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x55, 0x5f, 0x6f, 0x1c, 0x35,
	0x10, 0x67, 0xd3, 0xa4, 0x88, 0xc9, 0xbf, 0xc6, 0x45, 0xe5, 0x12, 0x25, 0x34, 0x1c, 0xb4, 0x8a,
	0x2a, 0xe5, 0x82, 0xe8, 0x0b, 0x42, 0x42, 0x90, 0xa8, 0xd7, 0x2a, 0x52, 0x8f, 0xae, 0xf6, 0x0a,
	0x0f, 0xbc, 0x58, 0xbb, 0xb7, 0xbe, 0x8d, 0x95, 0x5d, 0x7b, 0x59, 0x7b, 0x2f, 0xc9, 0x17, 0xe1,
	0x81, 0x67, 0xc4, 0x13, 0x9f, 0x86, 0x4f, 0xc4, 0xf8, 0xdf, 0xde, 0x42, 0x9b, 0x4a, 0x79, 0xb3,
	0xc7, 0xbf, 0x99, 0xf9, 0xcd, 0xcc, 0xcf, 0x36, 0xec, 0x29, 0xa6, 0x35, 0x17, 0x85, 0xa2, 0x55,
	0xaa, 0x34, 0x6b, 0x28, 0xd7, 0xac, 0x1a, 0xd5, 0x8d, 0xd4, 0x92, 0x3c, 0x8e, 0xdf, 0xbc, 0x7a,
	0x13, 0x9b, 0xa5, 0x1a, 0x4d, 0x3d, 0x6c, 0x34, 0xb1, 0xb0, 0xd1, 0x39, 0xc2, 0xf6, 0xd6, 0x99,
	0x68, 0x2b, 0xe5, 0xd0, 0x7b, 0xdb, 0x5c, 0x2c, 0x98, 0xd0, 0xb2, 0xb9, 0x71, 0x86, 0xe1, 0x9f,
	0xab, 0xb0, 0x73, 0x2e, 0x66, 0x4c, 0x28, 0x76, 0xaa, 0x75, 0xc3, 0xb3, 0x56, 0x33, 0x45, 0xbe,
	0x85, 0x01, 0x77, 0x46, 0x5a, 0xf2, 0x39, 0xd3, 0xbc, 0x62, 0x54, 0xb1, 0x99, 0x14, 0xb9, 0x1a,
	0x44, 0x87, 0xd1, 0xd1, 0x5a, 0xf2, 0xc8, 0x9f, 0xbf, 0xf6, 0xc7, 0x53, 0x77, 0x4a, 0x7e, 0x84,
	0x8d, 0x5a, 0x5e, 0xb2, 0x4a, 0x0a, 0xaa, 0x6f, 0x6a, 0x36, 0x58, 0x39, 0xbc, 0x77, 0xb4, 0xf5,
	0xcd, 0xc1, 0xa8, 0xc7, 0x72, 0x6c, 0xf9, 0xc4, 0x0e, 0xf5, 0x16, 0x41, 0xc9, 0x7a, 0xbd, 0xdc,
	0x90, 0x57, 0x70, 0x18, 0x22, 0x04, 0x0e, 0x26, 0x12, 0x45, 0xbe, 0x59, 0x9a, 0xf1, 0x92, 0xeb,
	0x9b, 0xc1, 0x3d, 0xe4, 0xb0, 0x92, 0x1c, 0x78, 0x9c, 0xe7, 0x6f, 0xbc, 0xe3, 0x25, 0x88, 0xfc,
	0x02, 0x47, 0x4a, 0xa7, 0x22, 0xc7, 0x8e, 0x50, 0x5b, 0x41, 0xc6, 0xf4, 0x15, 0x63, 0x82, 0x32,
	0x31, 0x93, 0xad, 0xc0, 0x06, 0xa9, 0xae, 0xa8, 0x55, 0x5b, 0xd4, 0x57, 0x01, 0xff, 0x16, 0xe1,
	0x67, 0x0e, 0x3d, 0xee, 0xc0, 0xa1, 0xc4, 0x18, 0x9e, 0x54, 0x72, 0x71, 0x7b, 0xd4, 0x2e, 0xe8,
	0x9a, 0x0d, 0xfa, 0x85, 0x03, 0xbf, 0x2f, 0x64, 0x88, 0x48, 0xe1, 0x38, 0xe7, 0x26, 0xf7, 0x8c,
	0xd1, 0x86, 0xfd, 0xd6, 0xf2, 0x86, 0xe5, 0x74, 0x2e, 0x31, 0xd2, 0x85, 0x6c, 0xec, 0xbc, 0x0d,
	0x7a, 0x91, 0x96, 0xb4, 0x62, 0x86, 0xc9, 0xe0, 0xbe, 0x8d, 0x7c, 0x14, 0x9c, 0x12, 0xef, 0xf3,
	0x52, 0x36, 0x53, 0xe7, 0x71, 0xee, 0x1d, 0x26, 0x16, 0x4f, 0x7e, 0x80, 0xfd, 0xd0, 0xd3, 0x14,
	0xa7, 0x9c, 0xce, 0x34, 0x26, 0x28, 0x99, 0x28, 0xf4, 0x85, 0x61, 0x3b, 0xf8, 0xd8, 0xc6, 0xdb,
	0xf5, 0x98, 0xd3, 0x00, 0x79, 0x6d, 0x11, 0xc8, 0x72, 0xf8, 0x47, 0x04, 0x7b, 0xe7, 0x41, 0x3a,
	0x3f, 0xd7, 0x45, 0x93, 0xe6, 0x7d, 0xbd, 0x1c, 0x03, 0x49, 0xf3, 0x9c, 0x6b, 0x2e, 0x05, 0x92,
	0x54, 0x08, 0x4a, 0x0b, 0xe6, 0x95, 0xb2, 0xb3, 0x3c, 0x99, 0xba, 0x03, 0x32, 0x81, 0x8d, 0xd6,
	0xc5, 0x08, 0x22, 0x89, 0x50, 0x24, 0xcf, 0xfa, 0x22, 0xe9, 0x92, 0x8d, 0xfe, 0x9f, 0xd6, 0x29,
	0xa6, 0x5d, 0x6e, 0x86, 0x25, 0xec, 0x8e, 0xaf, 0x6b, 0xd6, 0x70, 0x1c, 0x01, 0x3b, 0x93, 0x52,
	0xe9, 0x1e, 0xb5, 0x2f, 0x61, 0xf3, 0xba, 0xa6, 0x55, 0x5b, 0x6a, 0x5e, 0x97, 0x9c, 0x35, 0x96,
	0xd5, 0x4a, 0xb2, 0x71, 0x5d, 0x4f, 0x3a, 0x1b, 0x79, 0x06, 0x3b, 0x99, 0xf1, 0xa3, 0x79, 0xdb,
	0xa4, 0x86, 0x2b, 0xad, 0x94, 0x65, 0xb5, 0x96, 0x6c, 0xdb, 0x83, 0x17, 0xde, 0x3e, 0x51, 0xc3,
	0xbf, 0x23, 0x78, 0x34, 0x2e, 0x0a, 0x14, 0x5d, 0x9b, 0xa5, 0xc8, 0xab, 0x97, 0x6b, 0x02, 0x5b,
	0x3c, 0x98, 0x5d, 0x65, 0x91, 0xad, 0xec, 0xe9, 0xfb, 0x2b, 0xeb, 0x47, 0xb1, 0x55, 0x6d, 0xf2,
	0xfe, 0x96, 0x10, 0x58, 0x6d, 0x15, 0x0b, 0x44, 0xec, 0x9a, 0x9c, 0xc0, 0xc3, 0x4e, 0x2a, 0xbd,
	0xa2, 0xdc, 0x85, 0x20, 0xe1, 0x68, 0x59, 0xda, 0xf0, 0x39, 0x3c, 0x38, 0xc3, 0x99, 0x97, 0xfd,
	0x71, 0x3d, 0x86, 0x75, 0xc4, 0x51, 0x6c, 0x19, 0x5e, 0x1c, 0xed, 0x3b, 0x02, 0x68, 0x8a, 0x9d,
	0x65, 0xf8, 0x57, 0x04, 0x5b, 0x2f, 0xa5, 0xcc, 0x7b, 0x3e, 0xdf, 0xc3, 0xba, 0x79, 0x75, 0x28,
	0x9b, 0xcf, 0xd9, 0xcc, 0xf8, 0x98, 0x7b, 0xbd, 0xff, 0xee, 0xbd, 0x36, 0x6f, 0xce, 0xd8, 0x62,
	0x12, 0xe0, 0xdd, 0x9a, 0x8c, 0xe0, 0x61, 0xcf, 0xbd, 0x4b, 0x6d, 0x9e, 0x87, 0x95, 0x64, 0x67,
	0x09, 0xf4, 0x0c, 0xc8, 0x13, 0xd8, 0x2a, 0x1a, 0x79, 0x85, 0xfa, 0x0c, 0x50, 0x57, 0xe2, 0xa6,
	0xb3, 0x06, 0xa2, 0x09, 0x3c, 0x88, 0xa5, 0x19, 0xcc, 0x1d, 0xaa, 0x23, 0x07, 0x60, 0x76, 0x34,
	0xad, 0xcc, 0x2d, 0xf4, 0xdd, 0xfd, 0x04, 0x2d, 0xa7, 0xd6, 0x60, 0x3a, 0x96, 0xb0, 0x05, 0x5f,
	0xdc, 0xa9, 0x63, 0xff, 0x44, 0x40, 0xcc, 0x93, 0x96, 0xa5, 0x65, 0xf9, 0xa1, 0xae, 0x45, 0x77,
	0xea, 0x1a, 0x8a, 0x77, 0x96, 0xd6, 0xba, 0x6d, 0xfc, 0xb0, 0x2d, 0x59, 0x14, 0xaf, 0x37, 0xda,
	0x31, 0x93, 0xaf, 0xe1, 0xd3, 0xff, 0x80, 0x42, 0x32, 0xaf, 0x89, 0x3e, 0xd6, 0x87, 0x7d, 0x0a,
	0xdb, 0xfd, 0x61, 0x54, 0x32, 0xb7, 0x0f, 0x20, 0x76, 0x77, 0x99, 0x7b, 0x22, 0xf3, 0xe1, 0xef,
	0x28, 0x75, 0x7c, 0x53, 0xcc, 0x9a, 0xcf, 0x51, 0x4c, 0xbd, 0xc2, 0xbe, 0x83, 0xdd, 0xca, 0x5b,
	0x6f, 0xfb, 0x22, 0x3e, 0x0b, 0x80, 0x77, 0xff, 0x88, 0x03, 0xdd, 0xc8, 0x1b, 0x8a, 0x6a, 0xbd,
	0xa4, 0x58, 0x3e, 0x0d, 0x6f, 0x93, 0xaa, 0xd3, 0x2b, 0xc1, 0x72, 0x3f, 0x92, 0x5d, 0x03, 0x7a,
	0x81, 0x98, 0x9f, 0xda, 0xca, 0xff, 0x16, 0x53, 0x07, 0x38, 0xfb, 0xfc, 0xd7, 0xfd, 0x82, 0xeb,
	0x8b, 0x36, 0x1b, 0xcd, 0x64, 0x75, 0x52, 0x5f, 0x56, 0xa2, 0x90, 0xc7, 0x98, 0xed, 0xc4, 0x7e,
	0x6a, 0x2a, 0xfe, 0x28, 0x8e, 0xb2, 0xfb, 0x76, 0xfd, 0xfc, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xe2, 0x88, 0x7b, 0x50, 0x3d, 0x07, 0x00, 0x00,
}
